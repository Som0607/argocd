### ArgoCD ###

## What is ArgoCD? ##
	- ArgoCD is a declarative, GitOps-based continuous delivery tool for Kubernetes.
	- It automates the deployment of desired application states from a Git repository to your Kubernetes clusters. 
	- ArgoCD continuously monitors your running applications and compares their live state to the desired state defined in Git. If there are discrepancies, ArgoCD can automatically or manually sync the changes.

## Steps to Set Up ArgoCD

# Prerequisites
	Kubernetes Cluster: Ensure Kubernetes cluster is running. Use Minikube, kubeadm, or any cloud-based Kubernetes service.

	kubectl: Ensure kubectl is installed and configured to interact with your cluster.

# Step 1: Install ArgoCD
 - Create a new namespace for ArgoCD:
	kubectl create namespace argocd

 - Apply the ArgoCD manifests: (This command will deploy the ArgoCD components (server, repo server, application controller, etc.) in the argocd namespace.)
	kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

 - Step 2: Access the ArgoCD UI
	- ArgoCD provides a web UI for managing your deployments.
		- Expose the ArgoCD server as a LoadBalancer or NodePort service:
			- To make the ArgoCD UI accessible, expose the ArgoCD server service:
				kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
		
		- Get the ArgoCD server URL:
			- Use the following command to get the NodePort URL:
				kubectl get svc argocd-server -n argocd
				
		- Login to ArgoCD UI:
			- Open the URL in your web browser.
				- Username: admin
				- Password: The initial password for the admin user is autogenerated and stored as a secret in the ArgoCD namespace. To retrieve it:
					- kubectl get pods -n argocd
					- kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d; echo

 - Step 3: Install the ArgoCD CLI
	- To interact with ArgoCD from your terminal, install the ArgoCD CLI.
		- Download the latest version of the ArgoCD CLI:
			curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
			
			chmod +x argocd
			sudo mv argocd /usr/local/bin/
			
			argocd version
			
	# for example :- 
		- Prepare the Application Repository
			Create a Git repository (e.g., on GitHub or GitLab) with the following structure:
			
			nginx-app/
			├── kustomization.yaml
			├── deployment.yaml
			└── service.yaml

- deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.19.6
        ports:
        - containerPort: 80

- service.yaml

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer

- kustomization.yaml

resources:
  - deployment.yaml
  - service.yaml


 - Step 4: Connect ArgoCD to a Git Repository
	- You can now start managing your applications by connecting ArgoCD to your Git repository containing Kubernetes manifests.
	
	-  Create the ArgoCD Application
		- Login to ArgoCD CLI:
			argocd login <ARGOCD_SERVER>     ## Replace <ARGOCD_SERVER> with your ArgoCD server URL.

		- Create the Application in ArgoCD:
			argocd app create nginx-app \
			--repo <REPO_URL> \
			--path nginx-app \
			--dest-server https://kubernetes.default.svc \
			--dest-namespace default \
			--sync-policy automated

		
 - Step 5: Sync Your Applications
	- Once an application in ArgoCD have been set up, sync it to ensure that the desired state in Git is reflected in your Kubernetes cluster.
	
		argocd app sync nginx-app

	- check the status
		argocd app get nginx-app


## Issues
	Ignored (requires pruning) :- 
		- If the nginx-deployment was removed from the Git repository but still exists in the cluster, ArgoCD will mark it as "requires pruning." To resolve this, you can manually delete the nginx-deployment or enable pruning during sync.
		
		argocd app sync nginx-app --prune
